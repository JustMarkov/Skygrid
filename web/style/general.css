body, html {		width: 100%;	height: 100%;	overflow: hidden;	}#cube_container {	position: absolute;	overflow: hidden;	top: 50%;	left: 50%;		width: 75%;	height: 75%;		transform: translate(-50%, -50%);	background-color: #EEE;}@keyframes rotate {	from {		transform: rotateY(360deg);	}	to {		transform: rotateY(0deg);	}}.collection {	position: absolute;		--size: 100px;	transition: top 0.2s linear, transform 1s linear;		float: left;		left: 50%;	transition: left 0.2s ease;		height: 100%;	 	width: 10000000000000%;}.cube_parent:first-child {	margin-left: 0px;}.c-1 > .cube_parent:hover {		z-index: 101}.c0 > .cube_parent:hover {		z-index: 201}.c1 > .cube_parent:hover {		z-index: 301}.c2 > .cube_parent:hover {		z-index: 401}.c-1 > .cube_parent {		z-index: 100}.c0 > .cube_parent {		z-index: 200}.c1 > .cube_parent {		z-index: 300}.c2 > .cube_parent {		z-index: 400}.cube_parent {	position: relative;		margin-left: calc(var(--size) * 0.5);	float: left;		--marg: calc(var(--size) * 0.1);	--marg: 0px;		top: calc(50% + (var(--size) + var(--marg)) * var(--col));		transform-style: preserve-3d;	transform: translate(-50%, -50%) rotateX(-15deg);		height: var(--size);	width: var(--size);	perspective: 700px;	transition: top 0.2s linear;}.cube {	position: absolute;		--factor: 1;		transform-style: preserve-3d;	animation: rotate 6s cubic-bezier(0.75, 0.2, 0.2, 0.75) infinite;	animation: rotate 20s linear infinite;	background-color: transparent;		width: 1%;	height: 1%;		top: 50%;	left: 50%;		transform: translate(-50%, -50%);}.cube:hover {	--factor: 1.1;}.blocks, .blockinfo {	width: 100%;	height: 100%;	position: relative;	overflow-y: hidden;}.blocks {}.add_button {		position: absolute;	width: 5vw;	height: 5vw;		top: 50%;		border-radius: 100%;	border: #AAA solid 2px;	transform: translate(50%, -50%);	}.side {		position: absolute;	background-color: transparent;	background-size: calc(var(--size) * var(--factor));		image-rendering: pixelated;	image-rendering: -moz-crisp-edges;	image-rendering: crisp-edges;		width: calc(var(--size) * var(--factor));	height: calc(var(--size) * var(--factor));		transition: height 0.2s linear, width 0.2s linear, transform 0.2s linear, background-size 0.2s linear;}.side.down {	transform: rotateX(-90deg) translateZ(calc(var(--size) / 2 * var(--factor))) translateX(calc(var(--size) / -2 * var(--factor))) translateZ(calc(var(--size) * var(--factor) * -0.5));}.side.up {	transform: rotateX(90deg) translateZ(calc(var(--size) / 2 * var(--factor))) translateX(calc(var(--size) / -2 * var(--factor))) translateZ(calc(var(--size) * var(--factor) * 0.5));}.side.left {	transform: rotateY(-90deg) translateZ(calc(var(--size) * var(--factor))) translateY(calc(var(--size) * var(--factor) * -0.5));}.side.right {	transform: rotateY(90deg) translateY(calc(var(--size) * var(--factor) * -0.5));}	.side.front {	transform: rotateY(0deg) translateZ(calc(var(--size) / 2 * var(--factor))) translateX(calc(var(--size) * -0.5 * var(--factor))) translateY(calc(var(--size) * var(--factor) * -0.5));}.side.back {	transform: rotateY(180deg) translateZ(calc(var(--size) / 2 * var(--factor))) translateX(calc(var(--size) * 0.5 * var(--factor))) translateY(calc(var(--size) * var(--factor) * -0.5));}.side.cross.cross1 {	transform: rotateY(45deg) translateX(calc(var(--size) * -0.35 * var(--factor))) translateY(calc(var(--size) * var(--factor) * -0.5)) translateZ(calc(var(--size) * var(--factor) * -0.35));}.side.cross.cross0 {	transform: rotateY(-45deg) translateX(calc(var(--size) * -0.35 * var(--factor))) translateY(calc(var(--size) * var(--factor) * -0.5)) translateZ(calc(var(--size) * var(--factor) * 0.35));}